% Parameters
hip_amp = pi / 8;        % Amplitude of hip oscillation
knee_amp = pi / 12;      % Amplitude of knee oscillation
phase_offset = pi;       % Phase offset for the right leg
num_points = 5;         % Number of points to generate (sets resolution)
cycles = 10;            % Number of times that the legs cycle the points
traj_time = 1;          % Total trajectory time

% Generate the elliptical trajectory
pts_foot = generate_elliptical_trajectory(traj_time, hip_amp, knee_amp, phase_offset, num_points);

% Initial leg angles for encoder resets
angle1_init = 0;
angle2_init = -pi/2; 
angle3_init = 0;
angle4_init = -pi/2; 

% Total experiment time (buffers and trajectory)
pre_buffer_time = 2; 
post_buffer_time = 3;

% Gains for impedance controller
gains.K_1 = 250.0; gains.K_2 = 250.0;
gains.K_3 = 250.0; gains.K_4 = 250.0;
gains.D_1 = 15.0;  gains.D_2 = 15.0;
gains.D_3 = 15.0;  gains.D_4 = 15.0;

% Maximum duty cycle commanded by controller
duty_maxF = 0.3;
duty_maxB = 0.3;

% Updated trajectory function using traj_time
function pts_foot = generate_elliptical_trajectory(traj_time, hip_amp, knee_amp, phase_offset, num_points)
    % Create a time vector for one cycle based on the specified traj_time
    t = linspace(0, traj_time, num_points);

    % Compute joint angles
    q1_des = -pi/4 + hip_amp * cos(2 * pi * t / traj_time);            % Left hip
    q2_des = pi/2 + knee_amp * sin(2 * pi * t / traj_time);            % Left knee
    q3_des = -pi/4 + hip_amp * cos(2 * pi * t / traj_time + phase_offset); % Right hip
    q4_des = pi/2 + knee_amp * sin(2 * pi * t / traj_time + phase_offset); % Right knee

    % Combine results into pts_foot matrix
    % Row structure: [q1, q2, q3, q4, t]
    pts_foot = [q1_des; q2_des; q3_des; q4_des; t];

    % Display total trajectory time
    fprintf('Total Trajectory Time (one period): %.2f seconds\n', traj_time);
end

%% Run Experiment
[output_data] = RunTrajectoryExperiment(angle1_init, angle2_init, angle3_init, angle4_init, pts_foot, ...
                                        traj_time, pre_buffer_time, post_buffer_time, ...
                                        gains, duty_maxF, duty_maxB, cycles);

%% Plot Joint Space Data
% Extract data from output_data
time = output_data(:, 1);
th1_measured = output_data(:, 2);
th2_measured = output_data(:, 7);
th3_measured = output_data(:, 12);
th4_measured = output_data(:, 17);

% Desired joint angles from pts_foot
th1_des = pts_foot(1, :);
th2_des = pts_foot(2, :);
th3_des = pts_foot(3, :);
th4_des = pts_foot(4, :);

% Plot joint angles (desired vs measured)
figure;
subplot(4, 1, 1);
plot(time, th1_measured, 'b', 'DisplayName', 'Measured');
hold on;
plot(linspace(0, traj_time, num_points * cycles), repmat(th1_des, 1, cycles), 'r--', 'DisplayName', 'Desired');
xlabel('Time (s)');
ylabel('th1 (rad)');
legend('show');
title('Joint 1: Measured vs Desired Angle');

subplot(4, 1, 2);
plot(time, th2_measured, 'b', 'DisplayName', 'Measured');
hold on;
plot(linspace(0, traj_time, num_points * cycles), repmat(th2_des, 1, cycles), 'r--', 'DisplayName', 'Desired');
xlabel('Time (s)');
ylabel('th2 (rad)');
legend('show');
title('Joint 2: Measured vs Desired Angle');

subplot(4, 1, 3);
plot(time, th3_measured, 'b', 'DisplayName', 'Measured');
hold on;
plot(linspace(0, traj_time, num_points * cycles), repmat(th3_des, 1, cycles), 'r--', 'DisplayName', 'Desired');
xlabel('Time (s)');
ylabel('th3 (rad)');
legend('show');
title('Joint 3: Measured vs Desired Angle');

subplot(4, 1, 4);
plot(time, th4_measured, 'b', 'DisplayName', 'Measured');
hold on;
plot(linspace(0, traj_time, num_points * cycles), repmat(th4_des, 1, cycles), 'r--', 'DisplayName', 'Desired');
xlabel('Time (s)');
ylabel('th4 (rad)');
legend('show');
title('Joint 4: Measured vs Desired Angle');
